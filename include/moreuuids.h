/* 
 *	Copyright (C) 2003-2006 Gabest
 *	http://www.gabest.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *   
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *   
 *  You should have received a copy of the GNU General Public License
 *  along with GNU Make; see the file COPYING.  If not, write to
 *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. 
 *  http://www.gnu.org/copyleft/gpl.html
 *
 *  Note: This interface was defined for the matroska container format 
 *  originally, but can be implemented for other formats as well.
 *
 */

#pragma once

#include <dvdmedia.h>

#define DEFINE_GUID_FOURCC(fourcc) \
DEFINE_GUID(MEDIASUBTYPE_##fourcc, FOURCC_##fourcc, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);


// 30323449-0000-0010-8000-00AA00389B71  'I420' == MEDIASUBTYPE_I420
DEFINE_GUID(MEDIASUBTYPE_I420,
0x30323449, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define WAVE_FORMAT_DOLBY_AC3 0x2000
// {00002000-0000-0010-8000-00aa00389b71}
DEFINE_GUID(MEDIASUBTYPE_WAVE_DOLBY_AC3, 
WAVE_FORMAT_DOLBY_AC3, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// {00000092-0000-0010-8000-00aa00389b71}
DEFINE_GUID(MEDIASUBTYPE_SPDIF_DOLBY_AC3, 
0x00000092, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define WAVE_FORMAT_DVD_DTS 0x2001
// {00002001-0000-0010-8000-00aa00389b71}
DEFINE_GUID(MEDIASUBTYPE_WAVE_DTS, 
WAVE_FORMAT_DVD_DTS, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// Be compatible with 3ivx
#define WAVE_FORMAT_AAC 0x00FF
// {000000FF-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_AAC,
WAVE_FORMAT_AAC, 0x000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// ... and also compatible with nero
// btw, older nero parsers use a lower-case fourcc, newer upper-case (why can't it just offer both?)
// {4134504D-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_MP4A,
0x4134504D, 0x000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// {6134706D-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_mp4a,
0x6134706D, 0x000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define WAVE_FORMAT_MP3 0x0055
// 00000055-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_MP3,
WAVE_FORMAT_MP3, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define WAVE_FORMAT_FLAC 0xF1AC
// 0000F1AC-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_FLAC,
WAVE_FORMAT_FLAC, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// {1541C5C0-CDDF-477d-BC0A-86F8AE7F8354}
DEFINE_GUID(MEDIASUBTYPE_FLAC_FRAMED,
0x1541c5c0, 0xcddf, 0x477d, 0xbc, 0xa, 0x86, 0xf8, 0xae, 0x7f, 0x83, 0x54);

#define WAVE_FORMAT_TTA1 0x77A1
// {000077A1-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_TTA1,
WAVE_FORMAT_TTA1, 0x000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define WAVE_FORMAT_WAVPACK4 0x5756
// {00005756-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_WAVPACK4,
WAVE_FORMAT_WAVPACK4, 0x000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// {DA5B82EE-6BD2-426f-BF1E-30112DA78AE1}
DEFINE_GUID(MEDIASUBTYPE_SVCD_SUBPICTURE, 
0xda5b82ee, 0x6bd2, 0x426f, 0xbf, 0x1e, 0x30, 0x11, 0x2d, 0xa7, 0x8a, 0xe1);

// {7B57308F-5154-4c36-B903-52FE76E184FC}
DEFINE_GUID(MEDIASUBTYPE_CVD_SUBPICTURE, 
0x7b57308f, 0x5154, 0x4c36, 0xb9, 0x3, 0x52, 0xfe, 0x76, 0xe1, 0x84, 0xfc);

// {0E3A2342-F6E2-4c91-BDAE-87C71EAD0D63}
DEFINE_GUID(MEDIASUBTYPE_MPEG2_PVA, 
0xe3a2342, 0xf6e2, 0x4c91, 0xbd, 0xae, 0x87, 0xc7, 0x1e, 0xad, 0xd, 0x63);

// {6B6D0800-9ADA-11d0-A520-00A0D10129C0}
DEFINE_GUID(CLSID_NetShowSource, 
0x6b6d0800, 0x9ada, 0x11d0, 0xa5, 0x20, 0x0, 0xa0, 0xd1, 0x1, 0x29, 0xc0);

// DirectShowMedia

// {5E9C9EE0-2E4A-4f22-9906-7BBBB75AA2B6}
DEFINE_GUID(MEDIASUBTYPE_DirectShowMedia, 
0x5e9c9ee0, 0x2e4a, 0x4f22, 0x99, 0x6, 0x7b, 0xbb, 0xb7, 0x5a, 0xa2, 0xb6);

// Dirac

// {A29DA00F-A22B-40ea-98DE-2F7FECADA5DE}
DEFINE_GUID(MEDIASUBTYPE_Dirac, 
0xa29da00f, 0xa22b, 0x40ea, 0x98, 0xde, 0x2f, 0x7f, 0xec, 0xad, 0xa5, 0xde);

// {64726376-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DiracVideo,
0x64726376, 0x000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// {D2667A7E-4055-4244-A65F-DDDDF2B74BD7}
DEFINE_GUID(FORMAT_DiracVideoInfo, 
0xd2667a7e, 0x4055, 0x4244, 0xa6, 0x5f, 0xdd, 0xdd, 0xf2, 0xb7, 0x4b, 0xd7);

struct DIRACINFOHEADER
{
    VIDEOINFOHEADER2 hdr;
    DWORD cbSequenceHeader;
    DWORD dwSequenceHeader[1];
};

// MP4

// {08E22ADA-B715-45ed-9D20-7B87750301D4}
DEFINE_GUID(MEDIASUBTYPE_MP4, 
0x8e22ada, 0xb715, 0x45ed, 0x9d, 0x20, 0x7b, 0x87, 0x75, 0x3, 0x1, 0xd4);

// FLV

// {F2FAC0F1-3852-4670-AAC0-9051D400AC54}
DEFINE_GUID(MEDIASUBTYPE_FLV, 
0xf2fac0f1, 0x3852, 0x4670, 0xaa, 0xc0, 0x90, 0x51, 0xd4, 0x0, 0xac, 0x54);

// 34564C46-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_FLV4,
0x34564C46, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 34766C66-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_flv4,
0x34766C66, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 30365056-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_VP60,
0x30365056, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

#define FOURCC_vp60  MAKEFOURCC('v', 'p', '6', '0')
DEFINE_GUID_FOURCC(vp60)

// 31365056-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_VP61,
0x31365056, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

#define FOURCC_vp61  MAKEFOURCC('v', 'p', '6', '1')
DEFINE_GUID_FOURCC(vp61)

// 32365056-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_VP62,
0x32365056, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

#define FOURCC_vp62  MAKEFOURCC('v', 'p', '6', '2')
DEFINE_GUID_FOURCC(vp62)

#define FOURCC_VP6A  MAKEFOURCC('V', 'P', '6', 'A')
DEFINE_GUID_FOURCC(VP6A)
#define FOURCC_vp6a  MAKEFOURCC('v', 'p', '6', 'a')
DEFINE_GUID_FOURCC(vp6a)

//
// RealMedia
//

// {57428EC6-C2B2-44a2-AA9C-28F0B6A5C48E}
DEFINE_GUID(MEDIASUBTYPE_RealMedia, 
0x57428ec6, 0xc2b2, 0x44a2, 0xaa, 0x9c, 0x28, 0xf0, 0xb6, 0xa5, 0xc4, 0x8e);

// 30315652-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_RV10,
0x30315652, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 30325652-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_RV20,
0x30325652, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 30335652-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_RV30,
0x30335652, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 30345652-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_RV40,
0x30345652, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 31345652-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_RV41,
0x31345652, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 345f3431-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_14_4,
0x345f3431, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 385f3832-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_28_8,
0x385f3832, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 43525441-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_ATRC,
0x43525441, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 4b4f4f43-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_COOK,
0x4b4f4f43, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 54454e44-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_DNET,
0x54454e44, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 52504953-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_SIPR,
0x52504953, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 43414152-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_RAAC,
0x43414152, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 50434152-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_RACP,
0x50434152, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

enum 
{
	WAVE_FORMAT_14_4 = 0x2002,
	WAVE_FORMAT_28_8 = 0x2003,
	WAVE_FORMAT_ATRC = 0x0270, //WAVE_FORMAT_SONY_SCX,
	WAVE_FORMAT_COOK = 0x2004,
	WAVE_FORMAT_DNET = 0x2005,
	WAVE_FORMAT_RAAC = 0x2006,
	WAVE_FORMAT_RACP = 0x2007,
	WAVE_FORMAT_SIPR = 0x0130, //WAVE_FORMAT_SIPROLAB_ACEPLNET,
};

//
// PS2
//

#define WAVE_FORMAT_PS2_PCM 0xF521
// 0000F521-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_PS2_PCM,
WAVE_FORMAT_PS2_PCM, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define WAVE_FORMAT_PS2_ADPCM 0xF522
// 0000F522-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_PS2_ADPCM,
WAVE_FORMAT_PS2_ADPCM, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

struct WAVEFORMATEXPS2 : public WAVEFORMATEX
{
    DWORD dwInterleave;

	struct WAVEFORMATEXPS2()
	{
		memset(this, 0, sizeof(*this)); 
		cbSize = sizeof(WAVEFORMATEXPS2) - sizeof(WAVEFORMATEX);
	}
};

// {4F3D3D21-6D7C-4f73-AA05-E397B5EAE0AA}
DEFINE_GUID(MEDIASUBTYPE_PS2_SUB, 
0x4f3d3d21, 0x6d7c, 0x4f73, 0xaa, 0x5, 0xe3, 0x97, 0xb5, 0xea, 0xe0, 0xaa);

// Haali's video renderer

// {760A8F35-97E7-479d-AAF5-DA9EFF95D751}
DEFINE_GUID(CLSID_DXR,
0x760a8f35, 0x97e7, 0x479d, 0xaa, 0xf5, 0xda, 0x9e, 0xff, 0x95, 0xd7, 0x51);

//
// Ogg
//

// f07e245f-5a1f-4d1e-8bff-dc31d84a55ab
DEFINE_GUID(CLSID_OggSplitter,
0xf07e245f, 0x5a1f, 0x4d1e, 0x8b, 0xff, 0xdc, 0x31, 0xd8, 0x4a, 0x55, 0xab);

// {078C3DAA-9E58-4d42-9E1C-7C8EE79539C5}
DEFINE_GUID(CLSID_OggSplitPropPage,
0x78c3daa, 0x9e58, 0x4d42, 0x9e, 0x1c, 0x7c, 0x8e, 0xe7, 0x95, 0x39, 0xc5);

// 8cae96b7-85b1-4605-b23c-17ff5262b296 
DEFINE_GUID(CLSID_OggMux,
0x8cae96b7, 0x85b1, 0x4605, 0xb2, 0x3c, 0x17, 0xff, 0x52, 0x62, 0xb2, 0x96);

// {AB97AFC3-D08E-4e2d-98E0-AEE6D4634BA4}
DEFINE_GUID(CLSID_OggMuxPropPage,
0xab97afc3, 0xd08e, 0x4e2d, 0x98, 0xe0, 0xae, 0xe6, 0xd4, 0x63, 0x4b, 0xa4);

// {889EF574-0656-4B52-9091-072E52BB1B80}
DEFINE_GUID(CLSID_VorbisEnc,
0x889ef574, 0x0656, 0x4b52, 0x90, 0x91, 0x07, 0x2e, 0x52, 0xbb, 0x1b, 0x80);

// {c5379125-fd36-4277-a7cd-fab469ef3a2f}
DEFINE_GUID(CLSID_VorbisEncPropPage,
0xc5379125, 0xfd36, 0x4277, 0xa7, 0xcd, 0xfa, 0xb4, 0x69, 0xef, 0x3a, 0x2f);

// 02391f44-2767-4e6a-a484-9b47b506f3a4
DEFINE_GUID(CLSID_VorbisDec,
0x02391f44, 0x2767, 0x4e6a, 0xa4, 0x84, 0x9b, 0x47, 0xb5, 0x06, 0xf3, 0xa4);

// 77983549-ffda-4a88-b48f-b924e8d1f01c
DEFINE_GUID(CLSID_OggDSAboutPage,
0x77983549, 0xffda, 0x4a88, 0xb4, 0x8f, 0xb9, 0x24, 0xe8, 0xd1, 0xf0, 0x1c);

// {D2855FA9-61A7-4db0-B979-71F297C17A04}
DEFINE_GUID(MEDIASUBTYPE_Ogg,
0xd2855fa9, 0x61a7, 0x4db0, 0xb9, 0x79, 0x71, 0xf2, 0x97, 0xc1, 0x7a, 0x4);

// cddca2d5-6d75-4f98-840e-737bedd5c63b
DEFINE_GUID(MEDIASUBTYPE_Vorbis,
0xcddca2d5, 0x6d75, 0x4f98, 0x84, 0x0e, 0x73, 0x7b, 0xed, 0xd5, 0xc6, 0x3b);

// 6bddfa7e-9f22-46a9-ab5e-884eff294d9f
DEFINE_GUID(FORMAT_VorbisFormat,
0x6bddfa7e, 0x9f22, 0x46a9, 0xab, 0x5e, 0x88, 0x4e, 0xff, 0x29, 0x4d, 0x9f);

typedef struct tagVORBISFORMAT
{
	WORD nChannels;
	DWORD nSamplesPerSec;
	DWORD nMinBitsPerSec;
	DWORD nAvgBitsPerSec;
	DWORD nMaxBitsPerSec;
	float fQuality;
} VORBISFORMAT, *PVORBISFORMAT, FAR *LPVORBISFORMAT;

// {8D2FD10B-5841-4a6b-8905-588FEC1ADED9}
DEFINE_GUID(MEDIASUBTYPE_Vorbis2, 
0x8d2fd10b, 0x5841, 0x4a6b, 0x89, 0x5, 0x58, 0x8f, 0xec, 0x1a, 0xde, 0xd9);

// {B36E107F-A938-4387-93C7-55E966757473}
DEFINE_GUID(FORMAT_VorbisFormat2, 
0xb36e107f, 0xa938, 0x4387, 0x93, 0xc7, 0x55, 0xe9, 0x66, 0x75, 0x74, 0x73);

typedef struct tagVORBISFORMAT2
{
	DWORD Channels;
	DWORD SamplesPerSec;
	DWORD BitsPerSample;	
	DWORD HeaderSize[3]; // 0: Identification, 1: Comment, 2: Setup
} VORBISFORMAT2, *PVORBISFORMAT2, FAR *LPVORBISFORMAT2;

//
// Matroska
//

// {1AC0BEBD-4D2B-45ad-BCEB-F2C41C5E3788}
DEFINE_GUID(MEDIASUBTYPE_Matroska, 
0x1ac0bebd, 0x4d2b, 0x45ad, 0xbc, 0xeb, 0xf2, 0xc4, 0x1c, 0x5e, 0x37, 0x88);

// {E487EB08-6B26-4be9-9DD3-993434D313FD}
DEFINE_GUID(MEDIATYPE_Subtitle, 
0xe487eb08, 0x6b26, 0x4be9, 0x9d, 0xd3, 0x99, 0x34, 0x34, 0xd3, 0x13, 0xfd);

// {87C0B230-03A8-4fdf-8010-B27A5848200D}
DEFINE_GUID(MEDIASUBTYPE_UTF8, 
0x87c0b230, 0x3a8, 0x4fdf, 0x80, 0x10, 0xb2, 0x7a, 0x58, 0x48, 0x20, 0xd);

// {3020560F-255A-4ddc-806E-6C5CC6DCD70A}
DEFINE_GUID(MEDIASUBTYPE_SSA, 
0x3020560f, 0x255a, 0x4ddc, 0x80, 0x6e, 0x6c, 0x5c, 0xc6, 0xdc, 0xd7, 0xa);

// {326444F7-686F-47ff-A4B2-C8C96307B4C2}
DEFINE_GUID(MEDIASUBTYPE_ASS, 
0x326444f7, 0x686f, 0x47ff, 0xa4, 0xb2, 0xc8, 0xc9, 0x63, 0x7, 0xb4, 0xc2);

// {370689E7-B226-4f67-978D-F10BC1A9C6AE}
DEFINE_GUID(MEDIASUBTYPE_ASS2, 
0x370689e7, 0xb226, 0x4f67, 0x97, 0x8d, 0xf1, 0xb, 0xc1, 0xa9, 0xc6, 0xae);

// {76C421C4-DB89-42ec-936E-A9FBC1794714}
DEFINE_GUID(MEDIASUBTYPE_SSF, 
0x76c421c4, 0xdb89, 0x42ec, 0x93, 0x6e, 0xa9, 0xfb, 0xc1, 0x79, 0x47, 0x14);

// {B753B29A-0A96-45be-985F-68351D9CAB90}
DEFINE_GUID(MEDIASUBTYPE_USF, 
0xb753b29a, 0xa96, 0x45be, 0x98, 0x5f, 0x68, 0x35, 0x1d, 0x9c, 0xab, 0x90);

// {F7239E31-9599-4e43-8DD5-FBAF75CF37F1}
DEFINE_GUID(MEDIASUBTYPE_VOBSUB, 
0xf7239e31, 0x9599, 0x4e43, 0x8d, 0xd5, 0xfb, 0xaf, 0x75, 0xcf, 0x37, 0xf1);

// {A33D2F7D-96BC-4337-B23B-A8B9FBC295E9}
DEFINE_GUID(FORMAT_SubtitleInfo, 
0xa33d2f7d, 0x96bc, 0x4337, 0xb2, 0x3b, 0xa8, 0xb9, 0xfb, 0xc2, 0x95, 0xe9);

// {04EBA53E-9330-436c-9133-553EC87031DC}
DEFINE_GUID(MEDIASUBTYPE_HDMVSUB,
0x4eba53e, 0x9330, 0x436c, 0x91, 0x33, 0x55, 0x3e, 0xc8, 0x70, 0x31, 0xdc);

// H.264
// 34363248-0000-0010-8000-00AA00389B71  'H264' == MEDIASUBTYPE_H264
DEFINE_GUID(MEDIASUBTYPE_H264, 
0x34363248, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// 34363268-0000-0010-8000-00AA00389B71  'h264' == MEDIASUBTYPE_h264
DEFINE_GUID(MEDIASUBTYPE_h264,
0x34363268, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// 31435641-0000-0010-8000-00AA00389B71  'AVC1' == MEDIASUBTYPE_AVC1
DEFINE_GUID(MEDIASUBTYPE_AVC1, 
0x31435641, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// 31637661-0000-0010-8000-00AA00389B71  'avc1' == MEDIASUBTYPE_avc1
DEFINE_GUID(MEDIASUBTYPE_avc1, 
0x31637661, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// 34363258-0000-0010-8000-00AA00389B71  'X264' == MEDIASUBTYPE_X264
DEFINE_GUID(MEDIASUBTYPE_X264,
0x34363258, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// 34363278-0000-0010-8000-00AA00389B71  'x264' == MEDIASUBTYPE_x264
DEFINE_GUID(MEDIASUBTYPE_x264, 
0x34363278, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// 8D2D71CB-243F-45E3-B2D8-5FD7967EC09B         <= Use by MediaPortal for example... 
DEFINE_GUID(MEDIASUBTYPE_H264_bis, 
0x8D2D71CB, 0x243F, 0x45E3, 0xB2, 0xD8, 0x5F, 0xD7, 0x96, 0x7E, 0xC0, 0x9B); 

#define FOURCC_SVQ3  MAKEFOURCC('S', 'V', 'Q', '3')
DEFINE_GUID_FOURCC(SVQ3)

#define FOURCC_SVQ1  MAKEFOURCC('S', 'V', 'Q', '1')
DEFINE_GUID_FOURCC(SVQ1)

// 7B2BFE23-9D0E-4cfc-B68C-0B1408E57833
DEFINE_GUID(CLSID_MKVSourceFilter,
0x7B2BFE23, 0x9D0E, 0x4cfc, 0xB6, 0x8C, 0x0B, 0x14, 0x08, 0xE5, 0x78, 0x33);

// B0874EC4-61C4-4C11-A98A-8101EEED2439
DEFINE_GUID(CLSID_MkvReader,
0xB0874EC4, 0x61C4, 0x4C11, 0xA9, 0x8A, 0x81, 0x01, 0xEE, 0xED, 0x24, 0x39);

// 8c180c13-3d60-425f-a554-8ae406d6447a
DEFINE_GUID(CLSID_PplMp4Reader,
0x8c180c13, 0x3d60, 0x425f, 0xa5, 0x54, 0x8a, 0xe4, 0x06, 0xd6, 0x44, 0x7a);

// B999A9D1-931E-45C9-836B-90ED79072E41
DEFINE_GUID(CLSID_PplAsfReader,
0xB999A9D1, 0x931E, 0x45C9, 0x83, 0x6B, 0x90, 0xED, 0x79, 0x07, 0x2E, 0x41);

// 3CCC052E-BDEE-408A-BEA7-90914EF2964B
DEFINE_GUID(CLSID_Mp4Source,
0x3CCC052E, 0xBDEE, 0x408A, 0xBE, 0xA7, 0x90, 0x91, 0x4E, 0xF2, 0x96, 0x4B);

// 61F47056-E400-43D3-AF1E-AB7DFFD4C4AD
DEFINE_GUID(CLSID_Mp4Splitter,
0x61F47056, 0xE400, 0x43D3, 0xAF, 0x1E, 0xAB, 0x7D, 0xFF, 0xD4, 0xC4, 0xAD);

// 765035B3-5944-4A94-806B-20EE3415F26F
DEFINE_GUID(CLSID_RealSource,
0x765035B3, 0x5944, 0x4A94, 0x80, 0x6B, 0x20, 0xEE, 0x34, 0x15, 0xF2, 0x6F);

// E21BE468-5C18-43EB-B0CC-DB93A847D769
DEFINE_GUID(CLSID_RealSplitter, 
0xE21BE468, 0x5C18, 0x43EB, 0xB0, 0xCC, 0xDB, 0x93, 0xA8, 0x47, 0xD7, 0x69);

// 238d0f23-5dc9-45a6-9be2-666160c324dd
DEFINE_GUID(CLSID_RealVideoDecoder,
0x238d0f23, 0x5dc9, 0x45a6, 0x9b, 0xe2, 0x66, 0x61, 0x60, 0xc3, 0x24, 0xdd);

// 941a4793-a705-4312-8dfc-c11ca05f397e;
DEFINE_GUID(CLSID_RealAudioDecoder, 
0x941a4793, 0xa705, 0x4312, 0x8d, 0xfc, 0xc1, 0x1c, 0xa0, 0x5f, 0x39, 0x7e);

// 2eeb4adf-4578-4d10-bca7-bb955f56320a;
DEFINE_GUID(CLSID_WMAudioDecoderDMO, 
0x2eeb4adf, 0x4578, 0x4d10, 0xbc, 0xa7, 0xbb, 0x95, 0x5f, 0x56, 0x32, 0x0a);

// 82D353DF-90BD-4382-8BC2-3F6192B76E34;
DEFINE_GUID(CLSID_WMVideoDecoderDMO, 
0x82D353DF, 0x90BD, 0x4382, 0x8B, 0xC2, 0x3F, 0x61, 0x92, 0xB7, 0x6E, 0x34);

// 7BAFB3B1-D8F4-4279-9253-27DA423108DE
DEFINE_GUID(CLSID_WMVScreenDecoderDMO, 
0x7BAFB3B1, 0xD8F4, 0x4279, 0x92, 0x53, 0x27, 0xDA, 0x42, 0x31, 0x08, 0xDE);

// 874131CB-4ECC-443B-8948-746B89595D20
DEFINE_GUID(CLSID_WMASpeechDecoderDMO, 
0x874131CB, 0x4ECC, 0x443B, 0x89, 0x48, 0x74, 0x6B, 0x89, 0x59, 0x5D, 0x20);

// 09571A4B-F1FE-4C60-9760-DE6D310C7C31
DEFINE_GUID(CLSID_CoreAVC,
0x09571A4B, 0xF1FE, 0x4C60, 0x97, 0x60, 0xDE, 0x6D, 0x31, 0x0C, 0x7C, 0x31);

// 6AC7C19E-8CA0-4E3D-9A9F-2881DE29E0AC
DEFINE_GUID(CLSID_CoreAAC,
0x6AC7C19E, 0x8CA0, 0x4E3D, 0x9A, 0x9F, 0x28, 0x81, 0xDE, 0x29, 0xE0, 0xAC);

// 18C16B08-6497-420e-AD14-22D21C2CEAB7
DEFINE_GUID(CLSID_AudioSwitcher,
0x18C16B08, 0x6497, 0x420e, 0xAD, 0x14, 0x22, 0xD2, 0x1C, 0x2C, 0xEA, 0xB7);

// 93A22E7A-5091-45ef-BA61-6DA26156A5D0
DEFINE_GUID(CLSID_VobSubtitle,
0x93A22E7A, 0x5091, 0x45ef, 0xBA, 0x61, 0x6D, 0xA2, 0x61, 0x56, 0xA5, 0xD0);

//0A68C3B5-9164-4a54-AFAF-995B2FF0E0D4
DEFINE_GUID(CLSID_GabestMkv,
0x0A68C3B5, 0x9164, 0x4a54, 0xAF, 0xAF, 0x99, 0x5B, 0x2F, 0xF0, 0xE0, 0xD4);

//3CCC052E-BDEE-408A-BEA7-90914EF2964B
DEFINE_GUID(CLSID_GabestMp4,
0x3CCC052E, 0xBDEE, 0x408A, 0xBE, 0xA7, 0x90, 0x91, 0x4E, 0xF2, 0x96, 0x4B);

//61F47056-E400-43D3-AF1E-AB7DFFD4C4AD
DEFINE_GUID(CLSID_GabestMp4Splitter,
0x61F47056, 0xE400, 0x43D3, 0xAF, 0x1E, 0xAB, 0x7D, 0xFF, 0xD4, 0xC4, 0xAD);

//CEA8DEFF-0AF7-4DB9-9A38-FB3C3AEFC0DE
DEFINE_GUID(CLSID_GabestAvi,
0xCEA8DEFF, 0x0AF7, 0x4DB9, 0x9A, 0x38, 0xFB, 0x3C, 0x3A, 0xEF, 0xC0, 0xDE);

//1365BE7A-C86A-473C-9A41-C0A6E82C9FA3
DEFINE_GUID(CLSID_GabestMpeg,
0x1365BE7A, 0xC86A, 0x473C, 0x9A, 0x41, 0xC0, 0xA6, 0xE8, 0x2C, 0x9F, 0xA3);

//DC257063-045F-4BE2-BD5B-E12279C464F0
DEFINE_GUID(CLSID_GabestMpegSplitter,
0xDC257063, 0x045F, 0x4BE2, 0xBD, 0x5B, 0xE1, 0x22, 0x79, 0xC4, 0x64, 0xF0);
//C9ECE7B3-1D8E-41F5-9F24-B255DF16C087
DEFINE_GUID(CLSID_GabestFlv,
0xC9ECE7B3, 0x1D8E, 0x41F5, 0x9F, 0x24, 0xB2, 0x55, 0xDF, 0x16, 0xC0, 0x87);

//47E792CF-0BBE-4F7A-859C-194B0768650A
DEFINE_GUID(CLSID_GabestFlvSplitter,
0x47E792CF, 0x0BBE, 0x4F7A, 0x85, 0x9C, 0x19, 0x4B, 0x07, 0x68, 0x65, 0x0A);

//765035B3-5944-4A94-806B-20EE3415F26F
DEFINE_GUID(CLSID_GabestReal,
0x765035B3, 0x5944, 0x4A94, 0x80, 0x6B, 0x20, 0xEE, 0x34, 0x15, 0xF2, 0x6F);

//E21BE468-5C18-43EB-B0CC-DB93A847D769
DEFINE_GUID(CLSID_GabestRealSplitter,
0xE21BE468, 0x5C18, 0x43EB, 0xB0, 0xCC, 0xDB, 0x93, 0xA8, 0x47, 0xD7, 0x69);

//B4A7BE85-551D-4594-BDC7-832B09185041
DEFINE_GUID(CLSID_GabestAc3,
0xB4A7BE85, 0x551D, 0x4594, 0xBD, 0xC7, 0x83, 0x2B, 0x09, 0x18, 0x50, 0x41);

//6D3688CE-3E9D-42F4-92CA-8A11119D25CD
DEFINE_GUID(CLSID_GabestOgg,
0x6D3688CE, 0x3E9D, 0x42F4, 0x92, 0xCA, 0x8A, 0x11, 0x11, 0x9D, 0x25, 0xCD);

//54A35221-2C8D-4a31-A5DF-6D809847E393
DEFINE_GUID(CLSID_GabestCdda,
0x54A35221, 0x2C8D, 0x4a31, 0xA5, 0xDF, 0x6D, 0x80, 0x98, 0x47, 0xE3, 0x93);

//D367878E-F3B8-4235-A968-F378EF1B9A44
DEFINE_GUID(CLSID_GabestCdxa,
0xD367878E, 0xF3B8, 0x4235, 0xA9, 0x68, 0xF3, 0x78, 0xEF, 0x1B, 0x9A, 0x44);

//6B97CB13-A992-4970-8864-4F32E845B7B4
DEFINE_GUID(CLSID_GabestRadGame,
0x6B97CB13, 0xA992, 0x4970, 0x88, 0x64, 0x4F, 0x32, 0xE8, 0x45, 0xB7, 0xB4);

//6B8CF995-434B-49D3-856A-2AC9B16539A8
DEFINE_GUID(CLSID_ivmSource,
0x6B8CF995, 0x434B, 0x49D3, 0x85, 0x6A, 0x2A, 0xC9, 0xB1, 0x65, 0x39, 0xA8);

//55DA30FC-F16B-49FC-BAA5-AE59FC65F82D
DEFINE_GUID(CLSID_Halli,
0x55DA30FC, 0xF16B, 0x49FC, 0xBA, 0xA5, 0xAE, 0x59, 0xFC, 0x65, 0xF8, 0x2D);

//ABE7B1D9-4B3E-4ACD-A0D1-92611D3A4492
DEFINE_GUID(CLSID_DcBass,
0xABE7B1D9, 0x4B3E, 0x4ACD, 0xA0, 0xD1, 0x92, 0x61, 0x1D, 0x3A, 0x44, 0x92);

//E117D42B-839C-498A-95DA-647BC90E2B8F
DEFINE_GUID(CLSID_PmpSource,
0xE117D42B, 0x839C, 0x498A, 0x95, 0xDA, 0x64, 0x7B, 0xC9, 0x0E, 0x2B, 0x8F);

//33F6948B-CFBA-4020-99F5-7071E833FD87
DEFINE_GUID(CLSID_CyberLinkMpegDemux,
0x33F6948B, 0xCFBA, 0x4020, 0x99, 0xF5, 0x70, 0x71, 0xE8, 0x33, 0xFD, 0x87);

// AMR
//24FA7933-FE18-46A9-914A-C2AA0DBACE93
DEFINE_GUID(CLSID_MmAmr,
0x24FA7933, 0xFE18, 0x46A9, 0x91, 0x4A, 0xC2, 0xAA, 0x0D, 0xBA, 0xCE, 0x93);

// 726D6173-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_samr,
0x726D6173, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// 000000FE-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_AMR,
0x000000FE, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

//3D446B6F-71DE-4437-BE15-8CE47174340F
DEFINE_GUID(CLSID_GabestMpaDecoder,
0x3D446B6F, 0x71DE, 0x4437, 0xBE, 0x15, 0x8C, 0xE4, 0x71, 0x74, 0x34, 0x0F);

#pragma pack(push, 1)
typedef struct {
	DWORD dwOffset;	
	CHAR IsoLang[4]; // three letter lang code + terminating zero
	WCHAR TrackName[256]; // 256 chars ought to be enough for everyone :)
} SUBTITLEINFO;
#pragma pack(pop)

// SUBTITLEINFO structure content starting at dwOffset (also the content of CodecPrivate)
// --------------------------------------------------------------------------------------
//
// Here the text should start with the Byte Order Mark, even though 
// UTF-8 is prefered, it also helps identifying the encoding type.
//
// MEDIASUBTYPE_USF: 
//
// <?xml version="1.0" encoding="UTF-8"?>
// <!-- DOCTYPE USFSubtitles SYSTEM "USFV100.dtd" -->
// <?xml-stylesheet type="text/xsl" href="USFV100.xsl"?>
// 
// <USFSubtitles version="1.0">
// ... every element excluding <subtitles></subtitles> ...
// </USFSubtitles>
//
// MEDIASUBTYPE_SSA/ASS:
//
// The file header and all sub-sections except [Events]
//
// MEDIATYPE_VOBSUB:
//
// TODO
//

// Data description of the media samples (everything is UTF-8 encoded here)
// ------------------------------------------------------------------------
//
// MEDIASUBTYPE_USF:
//
// The text _inside_ the <subtitle>..</subtitle> element. 
//
// Since timing is set on the sample, there is no need to put
// <subtitle start=".." stop=".." duration=".."> into the data.
//
// MEDIASUBTYPE_SSA/ASS:
//
// Comma separated values similar to the "Dialogue: ..." line with these fields:
// ReadOrder, Layer, Style, Name, MarginL, MarginR, MarginV, Effect, Text
//
// With the exception of ReadOrder every field can be found in ASS files. The
// ReadOrder field is needed for the decoder to be able to reorder the streamed 
// samples as they were placed originally in the file.
//
// If the source is only SSA, the Layer field can be left empty.
//
// MEDIATYPE_VOBSUB:
//
// Standard dvd subpic data, without the stream id at the beginning.
//

// Matroska CodecID mappings
// ------------------------
//
// S_TEXT/ASCII	<->	MEDIATYPE_Text		MEDIASUBTYPE_NULL	FORMAT_None
// S_TEXT/UTF8	<->	MEDIATYPE_Subtitle	MEDIASUBTYPE_UTF8	FORMAT_SubtitleInfo
// S_TEXT/SSA	<->	MEDIATYPE_Subtitle	MEDIASUBTYPE_SSA	FORMAT_SubtitleInfo
// S_TEXT/ASS	<->	MEDIATYPE_Subtitle	MEDIASUBTYPE_ASS	FORMAT_SubtitleInfo
// S_TEXT/USF	<->	MEDIATYPE_Subtitle	MEDIASUBTYPE_USF	FORMAT_SubtitleInfo
// S_VOBSUB		<-> MEDIATYPE_Subtitle	MEDIASUBTYPE_VOBSUB	FORMAT_SubtitleInfo
// S_VOBSUB/ZLIB<-> MEDIATYPE_Subtitle	MEDIASUBTYPE_VOBSUB	FORMAT_SubtitleInfo
//

//F4AE8342-0329-4FDD-A8FD-4AFF4926C978
DEFINE_GUID(MEDIASUBTYPE_MPEG2_BDA_TRANSPORT,
0xF4AE8342, 0x0329, 0x4FDD, 0xA8, 0xFD, 0x4A, 0xFF, 0x49, 0x26, 0xC9, 0x78);

//A336CD3B-599C-4F70-A34D-E88EDE4B64C3
DEFINE_GUID(CLSID_NeroSplitter,
0xA336CD3B, 0x599C, 0x4F70, 0xA3, 0x4D, 0xE8, 0x8E, 0xDE, 0x4B, 0x64, 0xC3);

//0E9D4BF7-CBCB-46C7-BD80-4EF223A3DC2B
DEFINE_GUID(CLSID_GabestMpaSplitter,
0x0E9D4BF7, 0xCBCB, 0x46C7, 0xBD, 0x80, 0x4E, 0xF2, 0x23, 0xA3, 0xDC, 0x2B);

//9FF48807-E133-40AA-826F-9B2959E5232D
DEFINE_GUID(CLSID_GabestOggSplitter,
0x9FF48807, 0xE133, 0x40AA, 0x82, 0x6F, 0x9B, 0x29, 0x59, 0xE5, 0x23, 0x2D);

//412C98D0-B46E-4FFA-92E1-4016782EE0AB
DEFINE_GUID(CLSID_PmpSplitter,
0x412C98D0, 0xB46E, 0x4FFA, 0x92, 0xE1, 0x40, 0x16, 0x78, 0x2E, 0xE0, 0xAB);

//706D706D-0000-0000-0000-000000000000
DEFINE_GUID(MEDIASUBTYPE_PMP,
0x706D706D, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

//D51BD5A1-7548-11CF-A520-0080C77EF58A
DEFINE_GUID(CLSID_WAVEParser,
0xD51BD5A1, 0x7548, 0x11CF, 0xA5, 0x20, 0x00, 0x80, 0xC7, 0x7E, 0xF5, 0x8A);

//D51BD5A2-7548-11CF-A520-0080C77EF58A
DEFINE_GUID(CLSID_MIDIParser,
0xD51BD5A2, 0x7548, 0x11CF, 0xA5, 0x20, 0x00, 0x80, 0xC7, 0x7E, 0xF5, 0x8A);

//731B8592-4001-46D4-B1A5-33EC792B4501
DEFINE_GUID(CLSID_ElecardMPEG2Splitter,
0x731B8592, 0x4001, 0x46D4, 0xB1, 0xA5, 0x33, 0xEC, 0x79, 0x2B, 0x45, 0x01);

//F2E3D920-0F9B-4319-BE87-EB94CCEB6C09
DEFINE_GUID(CLSID_CyberLinkAvcDecoder7,
0xF2E3D920, 0x0F9B, 0x4319, 0xBE, 0x87, 0xEB, 0x94, 0xCC, 0xEB, 0x6C, 0x09);

// C16541FF-49ED-4DEA-9126-862F57722E31
DEFINE_GUID(CLSID_CyberLinkAvcDecoder8,
0xC16541FF, 0x49ED, 0x4DEA, 0x91, 0x26, 0x86, 0x2F, 0x57, 0x72, 0x2E, 0x31);

// 37991D68-42A3-40E3-8C05-037170E1A42A
DEFINE_GUID(CLSID_CyberLinkVsdDecoder8,
0x37991D68, 0x42A3, 0x40E3, 0x8C, 0x05, 0x03, 0x71, 0x70, 0xE1, 0xA4, 0x2A);

// 9EC248ED-333F-4A19-9CEC-5E6EB513290C
DEFINE_GUID(CLSID_CyberLinkVc1Decoder8,
0x9EC248ED, 0x333F, 0x4A19, 0x9C, 0xEC, 0x5E, 0x6E, 0xB5, 0x13, 0x29, 0x0C);

// 8D2D71CB-243F-45E3-B2D8-5FD7967EC09B
DEFINE_GUID(MEDIASUBTYPE_CLAVC,
0x8D2D71CB, 0x243F, 0x45E3, 0xB2, 0xD8, 0x5F, 0xD7, 0x96, 0x7E, 0xC0, 0x9B);

// 48535356-0000-0010-8000-00aa00389b71
DEFINE_GUID(MEDIASUBTYPE_VSSH,
0x48535356, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// 68737376-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_vssh,
0x68737376, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// A6F869FD-E176-4228-A9CD-11B0041FC391
DEFINE_GUID(MEDIATYPE_CLAVC0,
0xA6F869FD, 0xE176, 0x4228, 0xA9, 0xCD, 0x11, 0xB0, 0x04, 0x1F, 0xC3, 0x91);
// A6F869FD-E176-4228-A9CD-11B0041FC392
DEFINE_GUID(MEDIATYPE_CLAVC1,
0xA6F869FD, 0xE176, 0x4228, 0xA9, 0xCD, 0x11, 0xB0, 0x04, 0x1F, 0xC3, 0x92);

// 0F24EDB7-5D9E-49AC-B8EF-374A5D450BF6
DEFINE_GUID(MEDIATYPE_CLAVC2,
0x0F24EDB7, 0x5D9E, 0x49AC, 0xB8, 0xEF, 0x37, 0x4A, 0x5D, 0x45, 0x0B, 0xF6);

// 0F24EDB7-5D9E-49AC-B8EF-374A5D450BF7
DEFINE_GUID(MEDIATYPE_CLAVC3,
0x0F24EDB7, 0x5D9E, 0x49AC, 0xB8, 0xEF, 0x37, 0x4A, 0x5D, 0x45, 0x0B, 0xF7);

// 43DC7A79-60B4-40B5-A3E7-963F9B35DC11
DEFINE_GUID(MEDIATYPE_CLAVC4,
0x43DC7A79, 0x60B4, 0x40B5, 0xA3, 0xE7, 0x96, 0x3F, 0x9B, 0x35, 0xDC, 0x11);

// 43DC7A79-60B4-40B5-A3E7-963F9B35DC12
DEFINE_GUID(MEDIATYPE_CLAVC5,
0x43DC7A79, 0x60B4, 0x40B5, 0xA3, 0xE7, 0x96, 0x3F, 0x9B, 0x35, 0xDC, 0x12);

// E2522457-EB83-45B1-B45E-B298786D0E70
DEFINE_GUID(MEDIATYPE_CLAVC6,
0xE2522457, 0xEB83, 0x45B1, 0xB4, 0x5E, 0xB2, 0x98, 0x78, 0x6D, 0x0E, 0x70);

// A6F869FD-E176-4228-A9CD-11B0041FC391
DEFINE_GUID(MEDIATYPE_CLVIDSP0,
0xA6F869FD, 0xE176, 0x4228, 0xA9, 0xCD, 0x11, 0xB0, 0x04, 0x1F, 0xC3, 0x91);

// A6F869FD-E176-4228-A9CD-11B0041FC392
DEFINE_GUID(MEDIATYPE_CLVIDSP1,
0xA6F869FD, 0xE176, 0x4228, 0xA9, 0xCD, 0x11, 0xB0, 0x04, 0x1F, 0xC3, 0x92);

// DDDD8260-5FCB-4EF2-B88A-2330B73A46C0
DEFINE_GUID(MEDIATYPE_CLVIDSP2,
0xDDDD8260, 0x5FCB, 0x4EF2, 0xB8, 0x8A, 0x23, 0x30, 0xB7, 0x3A, 0x46, 0xC0);

// 43DC7A79-60B4-40B5-A3E7-963F9B35DC11
DEFINE_GUID(MEDIATYPE_CLVIDSP3,
0x43DC7A79, 0x60B4, 0x40B5, 0xA3, 0xE7, 0x96, 0x3F, 0x9B, 0x35, 0xDC, 0x11);

// 43DC7A79-60B4-40B5-A3E7-963F9B35DC12
DEFINE_GUID(MEDIATYPE_CLVIDSP4,
0x43DC7A79, 0x60B4, 0x40B5, 0xA3, 0xE7, 0x96, 0x3F, 0x9B, 0x35, 0xDC, 0x12);

// E2522457-EB83-45B1-B45E-B298786D0E70
DEFINE_GUID(MEDIATYPE_CLVIDSP5,
0xE2522457, 0xEB83, 0x45B1, 0xB4, 0x5E, 0xB2, 0x98, 0x78, 0x6D, 0x0E, 0x70);

// D979F77B-DBEA-4BF6-9E6D-1D7E57FBAD53
DEFINE_GUID(MEDIASUBTYPE_CLVC1,
0xD979F77B, 0xDBEA, 0x4BF6, 0x9E, 0x6D, 0x1D, 0x7E, 0x57, 0xFB, 0xAD, 0x53);

// 43DC7A79-60B4-40B5-A3E7-963F9B35DC11
DEFINE_GUID(MEDIATYPE_CLVC1_1,
0x43DC7A79, 0x60B4, 0x40B5, 0xA3, 0xE7, 0x96, 0x3F, 0x9B, 0x35, 0xDC, 0x11);

// 43DC7A79-60B4-40B5-A3E7-963F9B35DC12
DEFINE_GUID(MEDIATYPE_CLVC1_2,
0x43DC7A79, 0x60B4, 0x40B5, 0xA3, 0xE7, 0x96, 0x3F, 0x9B, 0x35, 0xDC, 0x12);

// A6F869FD-E176-4228-A9CD-11B0041FC391
DEFINE_GUID(MEDIATYPE_CLVC1_3,
0xA6F869FD, 0xE176, 0x4228, 0xA9, 0xCD, 0x11, 0xB0, 0x04, 0x1F, 0xC3, 0x91);

// A6F869FD-E176-4228-A9CD-11B0041FC392
DEFINE_GUID(MEDIATYPE_CLVC1_4,
0xA6F869FD, 0xE176, 0x4228, 0xA9, 0xCD, 0x11, 0xB0, 0x04, 0x1F, 0xC3, 0x92);

// 008BAC12-FBAF-497B-9670-BC6F6FBAE2C4
DEFINE_GUID(CLSID_GabestVideoDecoder,
0x008BAC12, 0xFBAF, 0x497B, 0x96, 0x70, 0xBC, 0x6F, 0x6F, 0xBA, 0xE2, 0xC4);

// 43564144-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_DAVC,
0x43564144, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 63766164-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_davc,
0x63766164, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 43564150-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_PAVC,
0x43564150, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 63766170-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_pavc,
0x63766170, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// FEB50740-7BEF-11CE-9BD9-0000E202599C
DEFINE_GUID(CLSID_CMPEGVideoCodec,
0xFEB50740, 0x7BEF, 0x11CE, 0x9B, 0xD9, 0x00, 0x00, 0xE2, 0x02, 0x59, 0x9C);

// 39F498AF-1A09-4275-B193-673B0BA3D478
DEFINE_GUID(CLSID_GabestMpegVideoDecoder,
0x39F498AF, 0x1A09, 0x4275, 0xB1, 0x93, 0x67, 0x3B, 0x0B, 0xA3, 0xD4, 0x78);

// 04FE9017-F873-410E-871E-AB91661A4EF7
DEFINE_GUID(CLSID_ffdshowVideoDecoder,
0x04FE9017, 0xF873, 0x410E, 0x87, 0x1E, 0xAB, 0x91, 0x66, 0x1A, 0x4E, 0xF7);

// 0F40E1E5-4F79-4988-B1A9-CC98794E6B55
DEFINE_GUID(CLSID_ffdshowAudioDecoder,
0x0F40E1E5, 0x4F79, 0x4988, 0xB1, 0xA9, 0xCC, 0x98, 0x79, 0x4E, 0x6B, 0x55);

// 4009F700-AEBA-11D1-8344-00C04FB92EB7
DEFINE_GUID(CLSID_AcelptNetAudioDecoder,
0x4009F700, 0xAEBA, 0x11D1, 0x83, 0x44, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7);

// 31345649-0000-0010-8000-00AA00389B71
DEFINE_GUID(CLSID_indeoVideo4,
0x31345649, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// C204438D-6E1A-4309-B09C-0C0F749863AF
DEFINE_GUID(CLSID_vp7Decoder,
0xC204438D, 0x6E1A, 0x4309, 0xB0, 0x9C, 0x0C, 0x0F, 0x74, 0x98, 0x63, 0xAF);

// A753A1EC-973E-4718-AF8E-A3F554D45C44
DEFINE_GUID(CLSID_AC3Filter,
0xA753A1EC, 0x973E, 0x4718, 0xAF, 0x8E, 0xA3, 0xF5, 0x54, 0xD4, 0x5C, 0x44);

// 1C3530CC-7053-4AB4-89D9-242D443E9A9A
DEFINE_GUID(CLSID_VMR7Windowless,
0x1C3530CC, 0x7053, 0x4AB4, 0x89, 0xD9, 0x24, 0x2D, 0x44, 0x3E, 0x9A, 0x9A);

// 7DF2D796-D6B9-4212-B6E8-005FE2A764B2
DEFINE_GUID(CLSID_VMR9Windowless, 
0x7DF2D796, 0xD6B9, 0x4212, 0xB6, 0xE8, 0x00, 0x5F, 0xE2, 0xA7, 0x64, 0xB2);

// ebb2c9c4-ed19-498a-84ea-181b4d8da782 
DEFINE_GUID(CLSID_PreferredVideoRenderer, 
0xebb2c9c4, 0xed19, 0x498a, 0x84, 0xea, 0x18, 0x1b, 0x4d, 0x8d, 0xa7, 0x82);

// 1f7213dc-7962-480f-b011-f6845a1be562
DEFINE_GUID(CLSID_PreferredAVCDecoder, 
	0x1f7213dc, 0x7962, 0x480f, 0xb0, 0x11, 0xf6, 0x84, 0x5a, 0x1b, 0xe5, 0x62);

//637f1fd9-0617-4b05-803d-130e5fb0a5c7
DEFINE_GUID(CLSID_PreferredAACDecoder, 
	0x637f1fd9, 0x0617, 0x4b05, 0x80, 0x3d, 0x13, 0x0e, 0x5f, 0xb0, 0xa5, 0xc7);

// dbfe80c2-3e91-441b-9022-b384dcc83a05
DEFINE_GUID(CLSID_PreferredAudioRenderer,
	0xdbfe80c2, 0x3e91, 0x441b, 0x90, 0x22, 0xb3, 0x84, 0xdc, 0xc8, 0x3a, 0x05);

// 2e44c278-40f2-4063-9c36-d458e752d4dc
DEFINE_GUID(CLSID_AudioSessionGUID,
	0x2e44c278, 0x40f2, 0x4063, 0x9c, 0x36, 0xd4, 0x58, 0xe7, 0x52, 0xd4, 0xdc);

// BDB5CFCC-626A-4195-B4A7-D0A5CD693284
DEFINE_GUID(CLSID_AacDecFilter,
	0xBDB5CFCC, 0x626A, 0x4195, 0xB4, 0xA7, 0xD0, 0xA5, 0xCD, 0x69, 0x32, 0x84);

#define FOURCC_FPS1  MAKEFOURCC('F', 'P', 'S', '1')
DEFINE_GUID_FOURCC(FPS1)
#define FOURCC_VMnc  MAKEFOURCC('V', 'M', 'n', 'c')
DEFINE_GUID_FOURCC(VMnc)
#define FOURCC_VMNC  MAKEFOURCC('V', 'M', 'N', 'C')
DEFINE_GUID_FOURCC(VMNC)
#define FOURCC_CRAM  MAKEFOURCC('C', 'R', 'A', 'M')
DEFINE_GUID_FOURCC(CRAM)
#define FOURCC_ACDV  MAKEFOURCC('A', 'C', 'D', 'V')
DEFINE_GUID_FOURCC(ACDV)
#define FOURCC_CSM0  MAKEFOURCC('C', 'S', 'M', '0')
DEFINE_GUID_FOURCC(CSM0)
#define FOURCC_UCOD  MAKEFOURCC('U', 'C', 'O', 'D')
DEFINE_GUID_FOURCC(UCOD)

#define FOURCC_FRWA  MAKEFOURCC('F', 'R', 'W', 'A')
DEFINE_GUID_FOURCC(FRWA)

#define FOURCC_FRWD  MAKEFOURCC('F', 'R', 'W', 'D')
DEFINE_GUID_FOURCC(FRWD)
#define FOURCC_FRWT  MAKEFOURCC('F', 'R', 'W', 'T')
DEFINE_GUID_FOURCC(FRWT)
#define FOURCC_FRWU  MAKEFOURCC('F', 'R', 'W', 'U')
DEFINE_GUID_FOURCC(FRWU)
#define FOURCC_CJPG  MAKEFOURCC('C', 'J', 'P', 'G')
DEFINE_GUID_FOURCC(CJPG)
#define FOURCC_I263  MAKEFOURCC('I', '2', '6', '3')
DEFINE_GUID_FOURCC(I263)
#define FOURCC_VP30  MAKEFOURCC('V', 'P', '3', '0')
DEFINE_GUID_FOURCC(VP30)
#define FOURCC_Xxan  MAKEFOURCC('X', 'x', 'a', 'n')
DEFINE_GUID_FOURCC(Xxan)
#define FOURCC_FMVC  MAKEFOURCC('F', 'M', 'V', 'C')
DEFINE_GUID_FOURCC(FMVC)
#define FOURCC_SMV2  MAKEFOURCC('S', 'M', 'V', '2')
DEFINE_GUID_FOURCC(SMV2)

// xvid Media types
#define FOURCC_XVID  MAKEFOURCC('X', 'V', 'I', 'D')
DEFINE_GUID_FOURCC(XVID)
#define FOURCC_xvid  MAKEFOURCC('x', 'v', 'i', 'd')
DEFINE_GUID_FOURCC(xvid)

#define FOURCC_XVIX  MAKEFOURCC('X', 'V', 'I', 'X')
DEFINE_GUID_FOURCC(XVIX)
#define FOURCC_xvix  MAKEFOURCC('x', 'v', 'i', 'x')
DEFINE_GUID_FOURCC(xvix)

// divx Media types
#define FOURCC_DIVX  MAKEFOURCC('D', 'I', 'V', 'X')
DEFINE_GUID_FOURCC(DIVX)
#define FOURCC_divx  MAKEFOURCC('d', 'i', 'v', 'x')
DEFINE_GUID_FOURCC(divx)

#define FOURCC_DIV1  MAKEFOURCC('D', 'I', 'V', '1')
DEFINE_GUID_FOURCC(DIV1)
#define FOURCC_div1  MAKEFOURCC('d', 'i', 'v', '1')
DEFINE_GUID_FOURCC(div1)

#define FOURCC_DIV2  MAKEFOURCC('D', 'I', 'V', '2')
DEFINE_GUID_FOURCC(DIV2)
#define FOURCC_div2  MAKEFOURCC('d', 'i', 'v', '2')
DEFINE_GUID_FOURCC(div2)

#define FOURCC_DIV3  MAKEFOURCC('D', 'I', 'V', '3')
DEFINE_GUID_FOURCC(DIV3)
#define FOURCC_div3  MAKEFOURCC('d', 'i', 'v', '3')
DEFINE_GUID_FOURCC(div3)

#define FOURCC_DIV4  MAKEFOURCC('D', 'I', 'V', '4')
DEFINE_GUID_FOURCC(DIV4)
#define FOURCC_div4  MAKEFOURCC('d', 'i', 'v', '4')
DEFINE_GUID_FOURCC(div4)

#define FOURCC_DIV5  MAKEFOURCC('D', 'I', 'V', '5')
DEFINE_GUID_FOURCC(DIV5)
#define FOURCC_div5  MAKEFOURCC('d', 'i', 'v', '5')
DEFINE_GUID_FOURCC(div5)

#define FOURCC_DIV6  MAKEFOURCC('D', 'I', 'V', '6')
DEFINE_GUID_FOURCC(DIV6)
#define FOURCC_div6  MAKEFOURCC('d', 'i', 'v', '6')
DEFINE_GUID_FOURCC(div6)

#define FOURCC_DX50  MAKEFOURCC('D', 'X', '5', '0')
DEFINE_GUID_FOURCC(DX50)
#define FOURCC_dx50  MAKEFOURCC('d', 'x', '5', '0')
DEFINE_GUID_FOURCC(dx50)
#define FOURCC_2IV2  MAKEFOURCC('2', 'I', 'V', '2')
DEFINE_GUID_FOURCC(2IV2)
#define FOURCC_2iv2  MAKEFOURCC('2', 'i', 'v', '2')
DEFINE_GUID_FOURCC(2iv2)
#define FOURCC_3IV2  MAKEFOURCC('3', 'I', 'V', '2')
DEFINE_GUID_FOURCC(3IV2)
#define FOURCC_3iv2  MAKEFOURCC('3', 'i', 'v', '2')
DEFINE_GUID_FOURCC(3iv2)
#define FOURCC_DVX3  MAKEFOURCC('D', 'V', 'X', '3')
DEFINE_GUID_FOURCC(DVX3)
#define FOURCC_dvx3  MAKEFOURCC('d', 'v', 'x', '3')
DEFINE_GUID_FOURCC(dvx3)
#define FOURCC_COL1  MAKEFOURCC('C', 'O', 'L', '1')
DEFINE_GUID_FOURCC(COL1)
#define FOURCC_col1  MAKEFOURCC('c', 'o', 'l', '1')
DEFINE_GUID_FOURCC(col1)

// mpeg4 Media types
#define FOURCC_MP41  MAKEFOURCC('M', 'P', '4', '1')
DEFINE_GUID_FOURCC(MP41)
#define FOURCC_mp41  MAKEFOURCC('m', 'p', '4', '1')
DEFINE_GUID_FOURCC(mp41)
#define FOURCC_MP4V  MAKEFOURCC('M', 'P', '4', 'V')
DEFINE_GUID_FOURCC(MP4V)
#define FOURCC_mp4v  MAKEFOURCC('m', 'p', '4', 'v')
DEFINE_GUID_FOURCC(mp4v)

// h263 media types
#define FOURCC_H263  MAKEFOURCC('H', '2', '6', '3')
DEFINE_GUID_FOURCC(H263)
#define FOURCC_h263  MAKEFOURCC('h', '2', '6', '3')
DEFINE_GUID_FOURCC(h263)

#define FOURCC_AMVV  MAKEFOURCC('A', 'M', 'V', 'V')
DEFINE_GUID_FOURCC(AMVV)
#define FOURCC_amvv  MAKEFOURCC('a', 'm', 'v', 'v')
DEFINE_GUID_FOURCC(amvv)

#define FOURCC_THEO  MAKEFOURCC('T', 'H', 'E', 'O')
DEFINE_GUID_FOURCC(THEO)
#define FOURCC_BLZ0  MAKEFOURCC('B', 'L', 'Z', '0')
DEFINE_GUID_FOURCC(BLZ0)
#define FOURCC_VP31  MAKEFOURCC('V', 'P', '3', '1')
DEFINE_GUID_FOURCC(VP31)
#define FOURCC_tscc  MAKEFOURCC('t', 's', 'c', 'c')
DEFINE_GUID_FOURCC(tscc)
#define FOURCC_IV32  MAKEFOURCC('I', 'V', '3', '2')
DEFINE_GUID_FOURCC(IV32)
#define FOURCC_410P  MAKEFOURCC('4', '1', '0', 'P')
DEFINE_GUID_FOURCC(410P)
#define FOURCC_mjpb  MAKEFOURCC('m', 'j', 'p', 'b')
DEFINE_GUID_FOURCC(mjpb)
#define FOURCC_RLE4  MAKEFOURCC('R', 'L', 'E', '4')
DEFINE_GUID_FOURCC(RLE4)

// Intel Video Media Types
#define FOURCC_IV41  MAKEFOURCC('I', 'V', '4', '1')
DEFINE_GUID_FOURCC(IV41)

// VP7 Media Types
#define FOURCC_VP70  MAKEFOURCC('V', 'P', '7', '0')
DEFINE_GUID_FOURCC(VP70)
#define FOURCC_VP71  MAKEFOURCC('V', 'P', '7', '1')
DEFINE_GUID_FOURCC(VP71)


#define FOURCC_dvc  MAKEFOURCC('d', 'v', 'c', ' ')
DEFINE_GUID_FOURCC(dvc)

#define FOURCC_AMVA  MAKEFOURCC('A', 'M', 'V', 'A')
DEFINE_GUID_FOURCC(AMVA)
#define FOURCC_IMA4  MAKEFOURCC('I', 'M', 'A', '4')
DEFINE_GUID_FOURCC(IMA4)
#define FOURCC_ima4  MAKEFOURCC('i', 'm', 'a', '4')
DEFINE_GUID_FOURCC(ima4)
#define FOURCC_ASWF  MAKEFOURCC('A', 'W', 'W', 'F')
DEFINE_GUID_FOURCC(ASWF)

#define FOURCC_qdm2  MAKEFOURCC('q', 'd', 'm', '2')
DEFINE_GUID_FOURCC(qdm2)
#define FOURCC_QDM2  MAKEFOURCC('Q', 'D', 'M', '2')
DEFINE_GUID_FOURCC(QDM2)
#define FOURCC_MAC3  MAKEFOURCC('M', 'A', 'C', '3')
DEFINE_GUID_FOURCC(MAC3)
#define FOURCC_MAC6  MAKEFOURCC('M', 'A', 'C', '6')
DEFINE_GUID_FOURCC(MAC6)

// FLV
#define FOURCC_FLV1  MAKEFOURCC('F', 'L', 'V', '1')
DEFINE_GUID_FOURCC(FLV1)
#define FOURCC_flv1  MAKEFOURCC('f', 'l', 'v', '1')
DEFINE_GUID_FOURCC(flv1)

// 
#define FOURCC_VP6F  MAKEFOURCC('V', 'P', '6', 'F')
DEFINE_GUID_FOURCC(VP6F)
#define FOURCC_vp6f  MAKEFOURCC('v', 'p', '6', 'f')
DEFINE_GUID_FOURCC(vp6f)
#define FOURCC_VP50  MAKEFOURCC('V', 'P', '5', '0')
DEFINE_GUID_FOURCC(VP50)
#define FOURCC_vp50  MAKEFOURCC('v', 'p', '5', '0')
DEFINE_GUID_FOURCC(vp50)


#define FOURCC_AP41  MAKEFOURCC('A', 'P', '4', '1')
DEFINE_GUID_FOURCC(AP41)
#define FOURCC_ap41  MAKEFOURCC('a', 'p', '4', '1')
DEFINE_GUID_FOURCC(ap41)

#define FOURCC_MPG3  MAKEFOURCC('M', 'P', 'G', '3')
DEFINE_GUID_FOURCC(MPG3)
#define FOURCC_mpg3  MAKEFOURCC('m', 'p', 'g', '3')
DEFINE_GUID_FOURCC(mpg3)

#define FOURCC_3IV1 MAKEFOURCC('3', 'I', 'V', '1') 
DEFINE_GUID_FOURCC(3IV1) 
#define FOURCC_3iv1 MAKEFOURCC('3', 'i', 'v', '1') 
DEFINE_GUID_FOURCC(3iv1) 
#define FOURCC_3IVX MAKEFOURCC('3', 'I', 'V', 'X') 
DEFINE_GUID_FOURCC(3IVX) 
#define FOURCC_3ivx MAKEFOURCC('3', 'i', 'v', 'x') 
DEFINE_GUID_FOURCC(3ivx) 
#define FOURCC_blz0 MAKEFOURCC('b', 'l', 'z', '0') 
DEFINE_GUID_FOURCC(blz0) 
#define FOURCC_DM4V MAKEFOURCC('D', 'M', '4', 'V') 
DEFINE_GUID_FOURCC(DM4V) 
#define FOURCC_dm4v MAKEFOURCC('d', 'm', '4', 'v') 
DEFINE_GUID_FOURCC(dm4v) 
#define FOURCC_FFDS MAKEFOURCC('F', 'F', 'D', 'S') 
DEFINE_GUID_FOURCC(FFDS) 
#define FOURCC_ffds MAKEFOURCC('f', 'f', 'd', 's') 
DEFINE_GUID_FOURCC(ffds) 
#define FOURCC_FVFW MAKEFOURCC('F', 'V', 'F', 'W') 
DEFINE_GUID_FOURCC(FVFW) 
#define FOURCC_fvfw MAKEFOURCC('f', 'v', 'f', 'w') 
DEFINE_GUID_FOURCC(fvfw) 
#define FOURCC_DXGM MAKEFOURCC('D', 'X', 'G', 'M') 
DEFINE_GUID_FOURCC(DXGM) 
#define FOURCC_dxgm MAKEFOURCC('d', 'x', 'g', 'm') 
DEFINE_GUID_FOURCC(dxgm) 
#define FOURCC_FMP4 MAKEFOURCC('F', 'M', 'P', '4') 
DEFINE_GUID_FOURCC(FMP4) 
#define FOURCC_fmp4 MAKEFOURCC('f', 'm', 'p', '4') 
DEFINE_GUID_FOURCC(fmp4) 
#define FOURCC_HDX4 MAKEFOURCC('H', 'D', 'X', '4') 
DEFINE_GUID_FOURCC(HDX4) 
#define FOURCC_hdx4 MAKEFOURCC('h', 'd', 'x', '4') 
DEFINE_GUID_FOURCC(hdx4) 
#define FOURCC_LMP4 MAKEFOURCC('L', 'M', 'P', '4') 
DEFINE_GUID_FOURCC(LMP4) 
#define FOURCC_lmp4 MAKEFOURCC('l', 'm', 'p', '4') 
DEFINE_GUID_FOURCC(lmp4) 
#define FOURCC_NDIG MAKEFOURCC('N', 'D', 'I', 'G') 
DEFINE_GUID_FOURCC(NDIG) 
#define FOURCC_ndig MAKEFOURCC('n', 'd', 'i', 'g') 
DEFINE_GUID_FOURCC(ndig) 
#define FOURCC_RMP4 MAKEFOURCC('R', 'M', 'P', '4') 
DEFINE_GUID_FOURCC(RMP4) 
#define FOURCC_rmp4 MAKEFOURCC('r', 'm', 'p', '4') 
DEFINE_GUID_FOURCC(rmp4) 
#define FOURCC_SMP4 MAKEFOURCC('S', 'M', 'P', '4') 
DEFINE_GUID_FOURCC(SMP4) 
#define FOURCC_smp4 MAKEFOURCC('s', 'm', 'p', '4') 
DEFINE_GUID_FOURCC(smp4) 
#define FOURCC_SEDG MAKEFOURCC('S', 'E', 'D', 'G') 
DEFINE_GUID_FOURCC(SEDG) 
#define FOURCC_sedg MAKEFOURCC('s', 'e', 'd', 'g') 
DEFINE_GUID_FOURCC(sedg) 

// 4C4C454E-0000-0010-8000-00AA00389B71 
DEFINE_GUID(MEDIASUBTYPE_NELLYMOSER, 
0x4C4C454E, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71); 


// 4F454854-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_THEORA,
0x4F454854, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 6F656874-0000-0010-8000-00AA00389B71
DEFINE_GUID(MEDIASUBTYPE_theora,
0x6F656874, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// e06d8033-db46-11cf-b4d1-00805f6cbbea
DEFINE_GUID(MEDIASUBTYPE_DTS,
0xe06d8033, 0xdb46, 0x11cf, 0xb4, 0xd1, 0x00, 0x80, 0x5f, 0x6c, 0xbb, 0xea);

// e06d8034-db46-11cf-b4d1-00805f6cbbea
DEFINE_GUID(MEDIASUBTYPE_SDDS,
0xe06d8034, 0xdb46, 0x11cf, 0xb4, 0xd1, 0x00, 0x80, 0x5f, 0x6c, 0xbb, 0xea);

// Additionnal DXVA GUIDs

// Intel ClearVideo VC1 bitstream decoder
DEFINE_GUID(DXVA_Intel_VC1_ClearVideo, 0xBCC5DB6D, 0xA2B6,0x4AF0,0xAC,0xE4,0xAD,0xB1,0xF7,0x87,0xBC,0x89);

// Intel ClearVideo H264 bitstream decoder
DEFINE_GUID(DXVA_Intel_H264_ClearVideo, 0x604F8E68, 0x4951,0x4C54,0x88,0xFE,0xAB,0xD2,0x5C,0x15,0xB3,0xD6);

